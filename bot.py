import os
import asyncio
import subprocess
import random
import json
import aiohttp
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import API_TOKEN, REQUIRED_CHANNEL, ADMIN_ID, DEEPSEEK_API_KEYS
from config import DEEPSEEK_PROMPT, MESSAGES_PER_HOUR, TARIFFS, MAX_DAILY_HOURS, DAILY_USAGE_FILE

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class WarmupStates:
    WAITING_GROUP_LINK = "waiting_group_link"
    WAITING_DURATION = "waiting_duration"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def duration_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(f"{h} —á–∞—Å–æ–≤", callback_data=f"dur_{h}") for h in TARIFFS]
    keyboard.add(*buttons)
    return keyboard

# –£—á—ë—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
def check_daily_limit(duration):
    today = datetime.date.today().isoformat()
    
    if os.path.exists(DAILY_USAGE_FILE):
        with open(DAILY_USAGE_FILE, 'r') as f:
            usage_data = json.load(f)
    else:
        usage_data = {}
    
    if today not in usage_data:
        usage_data[today] = 0
    
    if usage_data[today] + duration <= MAX_DAILY_HOURS:
        usage_data[today] += duration
        with open(DAILY_USAGE_FILE, 'w') as f:
            json.dump(usage_data, f)
        return True, usage_data[today]
    return False, usage_data[today]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π
async def generate_ai_messages(count):
    messages = []
    key_index = 0
    
    for i in range(count):
        # –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π
        api_key = DEEPSEEK_API_KEYS[key_index]
        key_index = (key_index + 1) % len(DEEPSEEK_API_KEYS)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        temperature = random.uniform(0.7, 0.95)
        seed = random.randint(1, 10000)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        payload = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": DEEPSEEK_PROMPT}],
            "temperature": temperature,
            "max_tokens": 100,
            "seed": seed
        }
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    "https://api.deepseek.com/chat/completions",
                    json=payload,
                    headers=headers
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if 'choices' in data and data['choices']:
                            message = data['choices'][0]['message']['content'].strip()
                            messages.append(message)
                        else:
                            messages.append(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{i+1} –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ üåü")
                    elif response.status == 429:
                        print(f"–ö–ª—é—á {api_key[:5]}... –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç")
                    else:
                        messages.append(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{i+1} –¥–ª—è —á–∞—Ç–∞ üî•")
        except:
            messages.append(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{i+1} –¥–ª—è –æ–±—â–µ–Ω–∏—è üí¨")
    
    return messages

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    if not await check_subscription(message.from_user.id):
        await message.answer(
            f"‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {REQUIRED_CHANNEL}",
            disable_web_page_preview=True
        )
        return
        
    await message.answer("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ WhatsApp –≥—Ä—É–ø–ø—É:")
    await WarmupStates.WAITING_GROUP_LINK.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
@dp.message_handler(state=WarmupStates.WAITING_GROUP_LINK)
async def process_group_link(message: types.Message, state: FSMContext):
    group_link = message.text.strip()
    if "https://chat.whatsapp.com/" not in group_link:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É WhatsApp:")
        return
        
    await state.update_data(group_link=group_link)
    await message.answer("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞:", reply_markup=duration_keyboard())
    await WarmupStates.WAITING_DURATION.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@dp.callback_query_handler(lambda c: c.data.startswith('dur_'), state=WarmupStates.WAITING_DURATION)
async def process_duration(callback_query: types.CallbackQuery, state: FSMContext):
    duration = int(callback_query.data.split('_')[1])
    data = await state.get_data()
    group_link = data['group_link']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    allowed, used_hours = check_daily_limit(duration)
    if not allowed:
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞!\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —á–∞—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {used_hours}/{MAX_DAILY_HOURS}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å."
        )
        await state.finish()
        return
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏
    session_id = f"{callback_query.from_user.id}_{int(time.time())}"
    os.makedirs(f"sessions/{session_id}", exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ DeepSeek
    total_messages = duration * MESSAGES_PER_HOUR
    await bot.send_message(callback_query.from_user.id, f"üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {total_messages} AI-—Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        messages = await generate_ai_messages(total_messages)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
        messages_file = f"sessions/{session_id}/messages.json"
        with open(messages_file, 'w', encoding='utf-8') as f:
            json.dump(messages, f, ensure_ascii=False, indent=2)
            
        # –ó–∞–ø—É—Å–∫ Node.js —Å–∫—Ä–∏–ø—Ç–∞
        cmd = [
            "node", "whatsapp_sender.js",
            session_id,
            group_link,
            str(duration),
            messages_file
        ]
        
        subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞
        qr_path = f"sessions/{session_id}_qr.txt"
        await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é QR
        
        if os.path.exists(qr_path):
            with open(qr_path, 'r') as qr_file:
                qr_code = qr_file.read()
                await bot.send_message(
                    callback_query.from_user.id,
                    f"üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ WhatsApp:\n"
                    f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –°–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n\n"
                    f"`{qr_code}`",
                    parse_mode="Markdown"
                )
        else:
            await bot.send_message(callback_query.from_user.id, "‚ö†Ô∏è QR-–∫–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            ADMIN_ID,
            f"üî• –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ–≥—Ä–µ–≤: \n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback_query.from_user.username}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —á–∞—Å–æ–≤\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —á–∞—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {used_hours + duration}/{MAX_DAILY_HOURS}"
        )
        
    except Exception as e:
        await bot.send_message(callback_query.from_user.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.finish()

if __name__ == '__main__':
    import time
    os.makedirs("sessions", exist_ok=True)
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)